---
openapi: 3.0.0
info:
  title: J.Alexander E-Commerce
  description: An E-Commerce REST API
  contact:
    name: Jordan A Holt
    email: jordanh316@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/holtenterprises/e-commerce-REST-API/1.0.0
  description: SwaggerHub API Auto Mocking
tags:
- name: admins
  description: Secured Admin-only calls
- name: developers
  description: Operations available to regular developers
- name: store
  description: List of inventory of products
- name: users
  description: User operations
- name: cart
  description: Adding or removing products to a cart
- name: orders
  description: Sending an order of items
- name: auth
  description: Authorize user- Login, Logoff, Register
paths:
  /store/inventory:
    get:
      tags:
      - developers
      - admin
      - store
      summary: searches inventory
      description: |
        By passing in the appropriate options, you can search for
        available inventory in the system
      operationId: searchInventory
      parameters:
      - name: searchString
        in: query
        description: pass an optional search string for looking up inventory
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: skip
        in: query
        description: number of records to skip for pagination
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          format: int32
      - name: limit
        in: query
        description: maximum number of records to return
        required: false
        style: form
        explode: true
        schema:
          maximum: 50
          minimum: 0
          type: integer
          format: int32
      responses:
        "200":
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventoryItem'
        "400":
          description: bad input parameter
    post:
      tags:
      - admins
      - developers
      - store
      summary: updates an inventory item
      description: updates an inventory item
      operationId: updateInventory
      requestBody:
        description: Inventory item to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryItem'
      responses:
        "201":
          description: item updated
        "400":
          description: invalid input, object invalid
    patch:
      tags:
      - admins
      - store
      summary: adds an inventory item
      description: Adds an item to the system
      operationId: addInventory
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryItem'
      responses:
        "201":
          description: item created
        "400":
          description: invalid input, object invalid
        "409":
          description: an existing item already exists
  /store/{inventoryId}:
    get:
      tags:
      - store
      summary: get inventory record of an item
      description: get inventory record of an item by id
      operationId: getInventoryItem
      parameters:
      - name: inventoryId
        in: path
        description: the Id of the item to be                fetched
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: item found
        "404":
          description: item not found
  /auth/register:
    post:
      tags:
      - auth
      summary: registers a new user
      description: registers a new user
      operationId: registerUser
      parameters:
      - name: username
        in: query
        description: the username for the new user
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: the password chosen by new user
        required: true
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: Adds a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: 200 Success
        "409":
          description: 409 Conflict- User Name Taken
        "500":
          description: 500 Internal Server Error
  /auth/login:
    get:
      tags:
      - auth
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /auth/logout:
    get:
      tags:
      - auth
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  /users/{username}:
    get:
      tags:
      - users
      summary: get a user record
      description: get a user record
      operationId: getUser
      parameters:
      - name: username
        in: path
        description: the username of user to be fetched
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: 200 Success
        "500":
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccount'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserAccount'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
      - users
      summary: Update user record
      description: Update user record
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: the name of user to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: update user account object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAccount'
        required: true
      responses:
        "200":
          description: 200 Success
        "500":
          description: 500 Internal Server Error
    delete:
      tags:
      - users
      - admin
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
  /cart/userId:
    post:
      tags:
      - cart
      summary: Create A New Cart
      description: Only a user can create a cart
      requestBody:
        description: New Created Cart
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
        required: true
      responses:
        "200":
          description: 200 Success
        "500":
          description: 500 Internal Server Error
  /cart/userid/{cartId}:
    get:
      tags:
      - cart
      summary: get cart by id
      description: a logged in users can have multiple carts
      parameters:
      - name: cartId
        in: path
        description: the id of the cart to be fetched
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: 200 Success- Cart Found
        "404":
          description: 404 Cart Not Found
  /cart/userid/{cartId}/items:
    post:
      tags:
      - cart
      summary: Add items to cart
      description: Only alogged user can create a cart
      operationId: addItems
      parameters:
      - name: cartId
        in: path
        description: The id of the cart
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Cart with items
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
      responses:
        "200":
          description: 200 Success-Items Added
        "500":
          description: 500 Internal Server Error
  /cart/userid/:cartId/:cartItemId:
    put:
      tags:
      - cart
      summary: Update item in cart
      description: Only alogged user can modfied items in a cart
      parameters:
      - name: cartId
        in: query
        description: The id of the cart
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: cartItemId
        in: query
        description: the id of the item to be updated
        required: true
        style: form
        explode: true
        schema:
          type: integer
      requestBody:
        description: Updated Cart Item
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
      responses:
        "200":
          description: 200 Success-Items Added
        "500":
          description: 500 Internal Server Error
    delete:
      tags:
      - cart
      summary: Delete item in cart
      description: Only alogged user can modfied items in a cart
      parameters:
      - name: cartId
        in: query
        description: The id of the cart
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: cartItemId
        in: query
        description: the id of the item to be updated
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: 200 Success-Items deleted
        "500":
          description: 500 Internal Server Error
  /cart/userid/{cartId}/checkout:
    post:
      tags:
      - cart
      summary: checkout a cart and create an order
      description: orders the items in the cart
      operationId: cartCheckout
      parameters:
      - name: cartId
        in: path
        description: the id of the cart to be fetched
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        description: Payment Object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Paymentinformation'
      responses:
        "200":
          description: 200 Success- Cart Found
        "202":
          description: 202 Payment Successful
        "404":
          description: 404 Cart Not Found
        "400":
          description: 400 Payment Not Successful
  /orders:
    get:
      tags:
      - orders
      summary: get a array of past orders
      description: a logged in user can look at past orders
      operationId: getAllOrders
      responses:
        "202":
          description: 202 Success
        "404":
          description: 404 No Past Orders
  /orders/{orderId}:
    get:
      tags:
      - orders
      summary: fetch past order by id
      description: a logged in user can look at past orders
      operationId: getOrderById
      parameters:
      - name: orderId
        in: path
        description: Id of order to be fetched
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Order'
      responses:
        "202":
          description: 202 Success
        "404":
          description: 404 No Past Orders
components:
  schemas:
    InventoryItem:
      required:
      - description
      - id
      - inventory
      - manufacturer
      - name
      - price
      - releaseDate
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: Widget Adapter
        releaseDate:
          type: string
          format: date-time
          example: 2016-08-29T09:12:33.001Z
        manufacturer:
          $ref: '#/components/schemas/Manufacturer'
        price:
          type: integer
          format: money
        description:
          type: string
          format: long string
          example: A red book case
        inventory:
          type: integer
          example: 4
    Manufacturer:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          example: ACME Corporation
        homePage:
          type: string
          format: url
          example: https://www.acme-corp.com
        phone:
          type: string
          example: 408-867-5309
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        username:
          type: string
          example: testUser1
        password:
          type: string
          format: password
          example: password
    UserAccount:
      type: object
      properties:
        user Id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        firstname:
          type: string
          example: Jordan
        lastname:
          type: string
          example: Holt
        email:
          type: string
          format: email
          example: jordan@test.com
        street:
          type: string
          example: 123 Main
        city:
          type: string
          example: Wichita
        state:
          type: string
          example: KS
        zipcode:
          type: integer
          format: zipcode
          example: 67206
      description: Additional user infomation
    Cart:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        created:
          type: string
          format: date-time
        modified:
          type: string
          format: date-time
        cart-items:
          $ref: '#/components/schemas/CartItem'
    CartItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
        added:
          type: string
          format: date-time
          example: 2016-08-29T09:12:33.001Z
        modified:
          type: string
          format: date-time
          example: 2016-08-29T09:12:33.001Z
        quantity:
          type: integer
          example: 101
        inventoryId:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        userId:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        shipping address:
          type: string
        shipping city:
          type: string
        shipping state:
          type: string
        shipping zip:
          type: integer
          format: zipcode
        total:
          type: integer
        order date:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - approved
          - shipped
          - delivered
        complete:
          type: boolean
          default: false
        ship date:
          type: string
          format: date-time
        order items:
          $ref: '#/components/schemas/CartItem'
    Paymentinformation:
      type: object
      properties:
        id:
          type: integer
          format: int64
        cardType:
          type: string
          enum:
          - Visa
          - MasterCard
          - American Express
          - Discover
        cardNumber:
          type: integer
          format: int32
        nameOnCard:
          type: string
        cardZip:
          type: integer
        status:
          type: string
          enum:
          - Pending
          - Approved
          - Declined
        orderId:
          type: integer
